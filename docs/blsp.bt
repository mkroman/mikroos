//------------------------------------------------
//--- 010 Editor v11.0 Binary Template
//
//      File: BuffaloImage.bt
//   Authors: Mikkel Kroman <mk@maero.dk>
//   Version: 0.1v
//   Purpose: Understanding the Buffalolabs image format
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

LittleEndian();

typedef ubyte u8;
typedef uint32 u32;
typedef uint16 u16;

struct SPI_FLASH_CFG {
    u8 ioMode;                         // Serail flash interface mode,bit0-3:IF mode,bit4:unwrap */
    u8 cReadSupport;                   // Support continuous read mode,bit0:continuous read mode support,bit1:read mode cfg */
    u8 clkDelay;                       // SPI clock delay,bit0-3:delay,bit4-6:pad delay */
    u8 clkInvert;                      // SPI clock phase invert,bit0:clck invert,bit1:rx invert,bit2-4:pad delay,bit5-7:pad delay */
    u8 resetEnCmd;                     // Flash enable reset command */
    u8 resetCmd;                       // Flash reset command */
    u8 resetCreadCmd;                  // Flash reset continuous read command */
    u8 resetCreadCmdSize;              // Flash reset continuous read command size */
    u8 jedecIdCmd;                     // JEDEC ID command */
    u8 jedecIdCmdDmyClk;               // JEDEC ID command dummy clock */
    u8 qpiJedecIdCmd;                  // QPI JEDEC ID comamnd */
    u8 qpiJedecIdCmdDmyClk;            // QPI JEDEC ID command dummy clock */
    u8 sectorSize;                     // *1024bytes */
    u8 mid;                            // Manufacturer ID */
    u16 pageSize;                      // Page size */
    u8 chipEraseCmd;                   // Chip erase cmd */
    u8 sectorEraseCmd;                 // Sector erase command */
    u8 blk32EraseCmd;                  // Block 32K erase command,some Micron not support */
    u8 blk64EraseCmd;                  // Block 64K erase command */
    u8 writeEnableCmd;                 // Need before every erase or program */
    u8 pageProgramCmd;                 // Page program cmd */
    u8 qpageProgramCmd;                // QIO page program cmd */
    u8 qppAddrMode;                    // QIO page program address mode */
    u8 fastReadCmd;                    // Fast read command */
    u8 frDmyClk;                       // Fast read command dummy clock */
    u8 qpiFastReadCmd;                 // QPI fast read command */
    u8 qpiFrDmyClk;                    // QPI fast read command dummy clock */
    u8 fastReadDoCmd;                  // Fast read dual output command */
    u8 frDoDmyClk;                     // Fast read dual output command dummy clock */
    u8 fastReadDioCmd;                 // Fast read dual io comamnd */
    u8 frDioDmyClk;                    // Fast read dual io command dummy clock */
    u8 fastReadQoCmd;                  // Fast read quad output comamnd */
    u8 frQoDmyClk;                     // Fast read quad output comamnd dummy clock */
    u8 fastReadQioCmd;                 // Fast read quad io comamnd */
    u8 frQioDmyClk;                    // Fast read quad io comamnd dummy clock */
    u8 qpiFastReadQioCmd;              // QPI fast read quad io comamnd */
    u8 qpiFrQioDmyClk;                 // QPI fast read QIO dummy clock */
    u8 qpiPageProgramCmd;              // QPI program command */
    u8 writeVregEnableCmd;             // Enable write reg */
    u8 wrEnableIndex;                  // Write enable register index */
    u8 qeIndex;                        // Quad mode enable register index */
    u8 busyIndex;                      // Busy status register index */
    u8 wrEnableBit;                    // Write enable bit pos */
    u8 qeBit;                          // Quad enable bit pos */
    u8 busyBit;                        // Busy status bit pos */
    u8 wrEnableWriteRegLen;            // Register length of write enable */
    u8 wrEnableReadRegLen;             // Register length of write enable status */
    u8 qeWriteRegLen;                  // Register length of contain quad enable */
    u8 qeReadRegLen;                   // Register length of contain quad enable status */
    u8 releasePowerDown;               // Release power down command */
    u8 busyReadRegLen;                 // Register length of contain busy status */
    u8 readRegCmd[4];                  // Read register command buffer */
    u8 writeRegCmd[4];                 // Write register command buffer */
    u8 enterQpi;                       // Enter qpi command */
    u8 exitQpi;                        // Exit qpi command */
    u8 cReadMode;                      // Config data for continuous read mode */
    u8 cRExit;                         // Config data for exit continuous read mode */
    u8 burstWrapCmd;                   // Enable burst wrap command */
    u8 burstWrapCmdDmyClk;             // Enable burst wrap command dummy clock */
    u8 burstWrapDataMode;              // Data and address mode for this command */
    u8 burstWrapData;                  // Data to enable burst wrap */
    u8 deBurstWrapCmd;                 // Disable burst wrap command */
    u8 deBurstWrapCmdDmyClk;           // Disable burst wrap command dummy clock */
    u8 deBurstWrapDataMode;            // Data and address mode for this command */
    u8 deBurstWrapData;                // Data to disable burst wrap */
    u16 timeEsector;                   // 4K erase time */
    u16 timeE32k;                      // 32K erase time */
    u16 timeE64k;                      // 64K erase time */
    u16 timePagePgm;                   // Page program time */
    u16 timeCe;                        // Chip erase time in ms */
    u8 pdDelay;                        // Release power down command delay time for wake up */
    u8 qeData;                         // QE set data */
};

struct FLASH_CONFIG {
    char magic[4]; // 'FCFG'
    SPI_FLASH_CFG spi_flash_cfg;
    uint32 crc32;
};

typedef struct {
    u8 xtalType;
    u8 pllClk;
    u8 hclkDiv;
    u8 bclkDiv;
    
    u8 flashClkType;
    u8 flashClkDiv;
    u8 rsvd[2];
} Boot_Sys_Clk_Config;


typedef struct {
    u32 magicCode;       /*'PCFG'*/
    Boot_Sys_Clk_Config cfg;
    u32 crc32;
} Boot_Clk_Config;

struct FILE {
    struct HEADER {
        char magic[4]; // BF'x'P where 'x' denotes the CPU number
        uint32 revision;
        FLASH_CONFIG flash_config;
        Boot_Clk_Config   clkCfg;

    union {
        struct  {
          u32 sign              :  2;   /* [1: 0]      for sign*/
          u32 encryptType       :  2;   /* [3: 2]      for encrypt */
          u32 keySel            :  2;   /* [5: 4]      for key sel in boot interface*/
          u32 rsvd6_7           :  2;   /* [7: 6]      for encrypt*/
          u32 noSegment         :  1;   /* [8]         no segment info */
          u32 cacheEnable       :  1;   /* [9]         for cache */
          u32 notLoadInBoot     :  1;   /* [10]        not load this img in bootrom */
          u32 aesRegionLock     :  1;   /* [11]        aes region lock */
          u32 cacheWayDisable   :  4;   /* [15: 12]    cache way disable info*/
          u32 crcIgnore         :  1;   /* [16]        ignore crc */
          u32 hashIgnore        :  1;   /* [17]        hash crc */
          u32 haltCPU1          :  1;   /* [18]        halt ap */
          u32 rsvd19_31         :  13;  /* [31:19]     rsvd */
        } bval;
        u32 wval;
    } bootCfg;

    union {
        u32 segmentCnt;
        u32 imgLen;
    } imgSegmentInfo;
    
    u32 bootEntry;      /* entry point of the image*/
    union {
        u32 ramAddr <format=hex>;
        u32 flashOffset <format=hex>;
    } imgStart;

    u8 hash[32] <format=hex>;    /*hash of the image*/

    u32 rsv1;
    u32 rsv2;
    u32 crc32;


    } header;
} file;

Assert(file.header.magic == "BFNP"); // CPU 1